# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Build and Publish

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint and typecheck

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Node.js with corepack
        uses: ./.github/actions/setup-node

      - name: Setup cache
        uses: ./.github/actions/setup-cache
        with:
          restore-key-prefix: 'lint-cache'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run typecheck
        run: pnpm run check-types

      - name: Run linting
        run: pnpm run lint

  build:
    runs-on: ubuntu-latest
    name: Build extension
    needs: lint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Node.js with corepack
        uses: ./.github/actions/setup-node

      - name: Setup cache
        uses: ./.github/actions/setup-cache
        with:
          restore-key-prefix: 'build-cache'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build extension
        run: pnpm run package

      - name: Set version for packaging
        id: version
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d)
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            PACKAGE_VERSION=$(jq -r '.version' package.json)
            VERSION="${PACKAGE_VERSION}"
          else
            VERSION="0.0.0-dev+ci.sha.${COMMIT_HASH}.${TIMESTAMP}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Package extension (Pre-release)
        if: github.ref_type != 'tag'
        run: pnpm vsce package --no-dependencies --pre-release --out "package-navigator-${{ steps.version.outputs.version }}.vsix"

      - name: Package extension (Release)
        if: github.ref_type == 'tag'
        run: pnpm vsce package --no-dependencies --out "package-navigator-${{ steps.version.outputs.version }}.vsix"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension
          path: '*.vsix'

  publish-ovsx:
    if: github.ref_type == 'tag'
    needs: build
    runs-on: ubuntu-latest
    name: Publish to Open VSX

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Enable corepack
        shell: bash
        run: corepack enable

      - name: Prepare pnpm
        shell: bash
        run: |
          corepack prepare pnpm@latest --activate
          echo "PNPM_HOME=$HOME/.local/share/pnpm" >> $GITHUB_ENV
          echo "$HOME/.local/share/pnpm" >> $GITHUB_PATH

      - name: Install ovsx CLI
        run: pnpm add -g ovsx --dangerously-allow-all-builds

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: vscode-extension

      - name: Publish to Open VSX
        run: ovsx publish --packagePath *.vsix --pat ${{ secrets.OVSX_TOKEN }}

  publish-vsce:
    if: github.ref_type == 'tag'
    needs: build
    runs-on: ubuntu-latest
    name: Publish to VS Code Marketplace

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Enable corepack
        shell: bash
        run: corepack enable

      - name: Prepare pnpm
        shell: bash
        run: |
          corepack prepare pnpm@latest --activate
          echo "PNPM_HOME=$HOME/.local/share/pnpm" >> $GITHUB_ENV
          echo "$HOME/.local/share/pnpm" >> $GITHUB_PATH

      - name: Install vsce CLI
        run: pnpm add -g vsce --dangerously-allow-all-builds

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: vscode-extension

      - name: Publish to VS Code Marketplace
        run: vsce publish --packagePath *.vsix --pat ${{ secrets.VSCE_TOKEN }}
